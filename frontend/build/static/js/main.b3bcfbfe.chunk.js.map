{"version":3,"sources":["utils/api/index.js","utils/stores/index.js","components/Bar/Bar.js","pages/UserTasks/TaskTable.js","pages/UserTasks/UserTasks.js","pages/Project/Project.js","pages/Manage/Manage.js","pages/Department/Department.js","res/logo.ico","components/NavDrawer/NavDrawer.js","App.js","index.js"],"names":["axios","create","baseURL","timeout","headers","useStore","set","selectedPerson","setSelectedPerson","newPerson","state","useStyles","makeStyles","theme","root","display","appBar","breakpoints","up","width","marginLeft","content","flexGrow","padding","spacing","pageTitle","paddingRight","alignItems","justifyContent","leftButtons","Bar","props","classes","leftChildren","Children","filter","children","child","justify","rightChildren","Box","className","sx","CssBaseline","AppBar","position","Toolbar","Typography","variant","noWrap","title","dateFormatOptions","weekday","year","month","day","editDialogAssignee","marginRight","marginTop","marginBottom","TaskTable","rows","projects","people","taskUpdate","useState","isModifyDialogOpen","setIsModifyDialogOpen","isDeleteConfOpen","setIsDeleteConfOpen","selectedTask","setSelectedTask","updateComplete","setUpdateComplete","updateTitle","setUpdateTitle","Date","updateDueDate","setUpdateDueDate","updateProject","setUpdateProject","personID","updatePerson","setUpdatePerson","creationDate","setCreationDate","taskID","setTaskID","handleClose","handleConfirmationClose","TableContainer","component","Paper","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","row","border","cursor","onClick","event","task","Boolean","Completion","Title","DueDate","ProjectID","PersonID","CreationDate","TaskID","console","log","hover","Tooltip","Checkbox","color","icon","checkedIcon","checked","onChange","taskToComplete","updatedTask","completion","target","api","put","then","response","handleCompletion","size","ProjectTitle","toLocaleDateString","Dialog","open","onClose","DialogTitle","margin","DialogContent","TextField","autoFocus","id","label","type","fullWidth","value","inputProps","maxLength","helperText","length","LocalizationProvider","dateAdapter","AdapterDateFns","DesktopDatePicker","inputFormat","renderInput","params","newDate","FormControl","m","InputLabel","Select","labelId","MenuItem","FirstName","LastName","DialogActions","Button","dueDate","getTime","projectID","delete","UserTasks","defaultNewDate","tasks","setTasks","setProjects","setPeople","isDialogOpen","setIsDialogOpen","newTaskProjectID","setNewTaskProject","newTaskTitle","setNewTaskTitle","newTaskDate","setNewTaskDate","newTaskPersonID","setNewTaskPerson","updateTasks","resetNewTaskValues","sp","get","data","catch","err","useEffect","unsub1","subscribe","IconButton","date","project","newTask","assignee","post","handleSubmit","Project","projectTasks","setProjectTasks","TaskRemaining","Manage","freeUsers","setFreeUsers","bestUser","setBestUser","JobRole","CompletedTasks","Department","departments","setDepartments","departmentSelect","setDepartmentSelect","departmentPeople","setDepartmentPeople","updateDepartmentPeople","sd","DeptID","DeptName","drawer","flexShrink","menuButton","drawerPaper","link","textDecoration","palette","text","primary","bottomPush","flexDirection","alignContent","height","bottomPushItems","textAlign","logoImg","objectFit","logo","PersonMenu","menuAnchorEl","setMenuAnchorEl","menuOpen","setPerson","personName","currentTarget","Menu","anchorEl","MenuListProps","withRouter","Drawer","paper","anchor","alt","src","Divider","List","to","ListItem","button","ListItemIcon","ListItemText","backgroundColor","background","default","toolbar","mixins","App","exact","from","path","createTheme","mode","cyan","secondary","green","ReactDOM","render","StyledEngineProvider","injectFirst","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b3bcfbfe.chunk.js","sourcesContent":["// Import axios for api calls\nimport axios from \"axios\";\n\n// Setup the base url to the backend server\nconst baseUrl = \"/\";\n\n// Export the axios component with some basic headers and base url defined above\nexport default axios.create({\n  baseURL: baseUrl,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n","// Import zustand for global state management\nimport create from 'zustand';\n\n// Create a zustand store for global state management\nconst useStore = create(set => ({\n    // Store the current selected person and define a function for updating this piece of state\n    selectedPerson: {'personID': -1, 'personName': \"All Tasks\"},\n    setSelectedPerson: (newPerson) => set(state => {\n        return({ selectedPerson: newPerson })\n    })\n}))\n\nexport default useStore","// React stuff\nimport React from \"react\";\nimport Children from 'react-children-utilities';\n\n// MUI components\nimport { makeStyles } from \"@mui/styles\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\n\nconst drawerWidth = 220; // FIXME: Move this elsewhere so it is accessible from both AppBar and NavDrawer\n\n// Generate css to style everything nicely\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: \"flex\",\n    },\n    appBar: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    // TODO: Fix this centering so that it doesn't get affected by buttons\n    // Maybe add phantom objects with a width to equal out widths on both sides?\n    pageTitle: {\n      paddingRight: \"20px\",\n      marginLeft: \"10px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    leftButtons: {\n      marginLeft: drawerWidth,\n    },\n  }));\n\n// Create the bar component to be used on every page\nfunction Bar(props) {\n    const classes = useStyles();\n\n    // Filter out children with proper justification\n    const leftChildren = Children.filter(props.children, (child) => child.props.justify === \"left\")\n    const rightChildren = Children.filter(props.children, (child) => child.props.justify === \"right\")\n\n    // Return the JSX necessary to create the bar, with leftChildren to the left of the title and rightChildren to the right\n    return (\n      <Box className={classes.root} sx={{ flexGrow: 1 }}>\n        <CssBaseline />\n        <AppBar position=\"fixed\" className={classes.AppBar}> {/* TODO:Figure out why app bar is not pulling left margin properly */}\n            <Toolbar>\n                <div className={classes.leftButtons}>\n                  {leftChildren}\n                </div>\n                <Typography className={classes.pageTitle} variant=\"h6\" noWrap sx={{ flexGrow: 1 }}>\n                    {props.title}\n                </Typography>\n                <div>\n                  {rightChildren}\n                </div>\n            </Toolbar>\n        </AppBar>\n      </Box>\n    )\n}\n\nexport default Bar;\n","// Import React stuff\nimport React, { useState } from \"react\";\n\n// Import utilites and components\nimport api from \"../../utils/api\";\nimport useStore from \"../../utils/stores\"\n\n// Import icons from mui\nimport CheckIcon from '@mui/icons-material/CheckCircleOutline';\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\n\n// Import general mui stuff\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Checkbox, Button, Tooltip } from '@mui/material';\n\n// Import dialog stuff from mui\nimport { TextField, Dialog, DialogActions, DialogContent, DialogTitle, Select, MenuItem } from \"@mui/material\";\nimport { FormControl, InputLabel } from \"@mui/material\";\n\n// Import date picker and localization\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\n\nimport { makeStyles } from \"@mui/styles\";\n\n// Setup a general format for dates\nconst dateFormatOptions = { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' }\n\n// Generate some themeing for this component\nconst useStyles = makeStyles((theme) => ({\n  editDialogAssignee: {\n    marginRight: 8,\n    marginTop: 8,\n    marginBottom: 8,\n  }\n}));\n\n// Create a component for the table of tasks\nexport function TaskTable({ rows, projects, people, taskUpdate }) {\n\n    const classes = useStyles()\n  \n    // Grab the selected person piece of state so it can later be passed to the taskUpdate function\n    const selectedPerson = useStore(state => state.selectedPerson)\n  \n    // Create relevant pieces of state for the dialog popups\n    const [isModifyDialogOpen, setIsModifyDialogOpen] = useState(false)\n    const [isDeleteConfOpen, setIsDeleteConfOpen] = useState(false)\n    const [selectedTask, setSelectedTask] = useState({})\n  \n    // Create pieces of state for handling task updates\n    const [updateComplete, setUpdateComplete] = useState(false)\n    const [updateTitle, setUpdateTitle] = useState(\"\")\n    const [updateDueDate, setUpdateDueDate] = useState(new Date())\n    const [updateProject, setUpdateProject] = useState(-1)\n    const [updatePerson, setUpdatePerson] = useState(selectedPerson.personID)\n  \n    const [creationDate, setCreationDate] = useState(new Date())\n    const [taskID, setTaskID] = useState(-1)\n  \n    // Handle when a row is clicked and set up the pieces of state\n    const handleRowClick = (event, task) => {\n      setSelectedTask(task)\n      setUpdateComplete(Boolean(task.Completion))\n      setUpdateTitle(task.Title)\n      setUpdateDueDate(new Date(task.DueDate * 1000))\n      setUpdateProject(task.ProjectID)\n      setUpdatePerson(task.PersonID != null ? task.PersonID : -1)\n      setIsModifyDialogOpen(true)\n      setCreationDate(task.CreationDate)\n      setTaskID(task.TaskID)\n      console.log(`Opening modification window for task id: ${task.TaskID}`)\n    }\n  \n    // Functions to handle changes in values for modification dialog\n    const handleUpdateCompleteChange = (event) => {\n      setUpdateComplete(event.target.checked)\n    }\n    const handleUpdateTitleChange = (event) => {\n      setUpdateTitle(event.target.value)\n    }\n    const handleUpdateDateChange = (newDate) => {\n      setUpdateDueDate(newDate)\n    }\n    const handleUpdateProjectChange = (event) => {\n      setUpdateProject(event.target.value)\n    }\n  \n    const handleUpdatePersonChange = (event) => {\n      setUpdatePerson(event.target.value)\n    }\n  \n    const handleClose = () => {\n      setIsModifyDialogOpen(false)\n    }\n\n    const handleConfirmationClose = () => {\n      setIsDeleteConfOpen(false)\n    }\n\n    const handleDeleteConfirmation = () => {\n      setIsDeleteConfOpen(true)\n    }\n  \n    // Handle database update on submission of the dialog\n    const handleSubmit = () => {\n      setIsModifyDialogOpen(false)\n  \n      // Create the new updated task object\n      const updatedTask = {\n        title: updateTitle,\n        completion: updateComplete,\n        dueDate: updateDueDate.getTime() / 1000,\n        projectID: updateProject,\n        creationDate: creationDate,\n        taskID: taskID,\n        personID: updatePerson\n      }\n  \n      // Make a call to the backend api to update the task\n      api.put(`/api/tasks/${updatedTask.taskID}`, updatedTask)\n      .then(response => {\n        taskUpdate(selectedPerson)\n      })\n    }\n  \n    // Handle when the delete button is pressed for a selected task\n    const handleDelete = () => {\n      setIsModifyDialogOpen(false)\n      setIsDeleteConfOpen(false)\n  \n      // Make the call to the backend to delete the selected task\n      api.delete(`/api/tasks/delete/${taskID}`)\n        .then(response => {\n          taskUpdate(selectedPerson)\n        })\n    }\n  \n    const handleCompletion = (event, taskToComplete) => {\n  \n      // Suppress opening of the dialog box when the checkbox is clicked\n      setIsModifyDialogOpen(false)\n  \n      const updatedTask = {\n        completion: event.target.checked,\n        taskID: taskToComplete\n      }\n  \n      api.put(`/api/task/complete/${updatedTask.taskID}`, updatedTask)\n        .then(response => {\n          taskUpdate(selectedPerson)\n        })\n    }\n  \n    // TODO: Add spinner/message when rows is empty array\n    return (\n      <>\n        {/* Build the task table */}\n        <TableContainer component={Paper}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"User's Tasks\">\n  \n            {/* Generate the headers of the rows */}\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell>Title</TableCell>\n                <TableCell align=\"right\">Project</TableCell>\n                <TableCell align=\"right\">Due</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {/* Map each task from the backend to a row in the table */}\n              {rows.map((row) => (\n                <TableRow\n                  key={row.TaskID}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 }, cursor: 'pointer' }}\n                  onClick={(event) => handleRowClick(event, row)}\n                  hover\n                >\n                  <TableCell padding=\"checkbox\">\n                    <Tooltip title={Boolean(row.Completion) ? \"Mark Incomplete\" : \"Mark Complete\"}>\n                      <Checkbox color=\"primary\" icon={<RadioButtonUncheckedIcon />} checkedIcon={<CheckIcon />} checked={Boolean(row.Completion)} onChange={(event) => handleCompletion(event, row.TaskID)}/>\n                    </Tooltip>\n                  </TableCell>\n                  <TableCell>{row.Title}</TableCell>\n                  <TableCell align=\"right\" size=\"small\">{row.ProjectID === -1 ? \"None\" : row.ProjectTitle}</TableCell>\n                  {/* TODO: Turn this date red if the date has passed */}\n                  <TableCell align=\"right\" size=\"small\">{new Date(row.DueDate * 1000).toLocaleDateString(\"en-US\", dateFormatOptions)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n  \n        {/* The popup dialog for editing and deleting tasks */}\n        <Dialog open={isModifyDialogOpen} onClose={handleClose}>\n          <DialogTitle>\n            <Tooltip title={updateComplete ? \"Mark Incomplete\" : \"Mark Complete\"}>\n              <Checkbox color=\"primary\" icon={<RadioButtonUncheckedIcon />} checkedIcon={<CheckIcon />} checked={updateComplete} onChange={handleUpdateCompleteChange} margin='normal'/>\n            </Tooltip>\n            Modify task \"{selectedTask.Title}\"\n          </DialogTitle>\n          <DialogContent>\n            <TextField autoFocus id=\"Title\" label=\"Title\" type=\"text\" fullWidth variant=\"outlined\" margin=\"normal\" onChange={handleUpdateTitleChange} value={updateTitle} inputProps={{maxLength: 100}} helperText={`${updateTitle.length}/100`}/>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DesktopDatePicker label=\"Due Date\" inputFormat=\"MM/dd/yyyy\" renderInput={(params) => <TextField margin=\"normal\" {...params}/>} onChange={handleUpdateDateChange} value={updateDueDate}/>\n            </LocalizationProvider>\n            <FormControl sx={{ m: 2, minWidth: 120 }}>\n              <InputLabel id='project-select'>Project</InputLabel>\n              <Select labelId=\"project-select-label\" id=\"project-select\" label=\"Project\" value={updateProject} onChange={handleUpdateProjectChange}>\n                <MenuItem value={-1}>None</MenuItem>\n                {projects.map((row) => (\n                  <MenuItem key={row.ProjectID} value={row.ProjectID}>{row.Title}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <FormControl sx={{ minWidth: 200 }} className={classes.editDialogAssignee}>\n              <InputLabel id='assignee-select'>Assignee</InputLabel>\n              <Select labelId=\"assignee-select-label\" id=\"assignee-select\" value={updatePerson} label=\"Person\" onChange={handleUpdatePersonChange}>\n                <MenuItem value={-1}>None</MenuItem>\n                {people.map((row) => (\n                  <MenuItem key={row.PersonID} value={row.PersonID}>{row.FirstName + \" \" + row.LastName}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            {/* TODO: Add label for when task was last assigned */}\n          </DialogContent>\n  \n          {/* Generate the buttons to act as actions on the dialog popup */}\n          <DialogActions>\n            <Button onClick={handleDeleteConfirmation} color=\"error\">Delete Task</Button>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button onClick={handleSubmit}>Confirm</Button>\n          </DialogActions>\n        </Dialog>\n\n        <Dialog open={isDeleteConfOpen} onClose={handleConfirmationClose}>\n          <DialogTitle>\n            Confirm\n          </DialogTitle>\n          <DialogContent>\n            Are you sure you want to delete task: \"{selectedTask.Title}\"?\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleConfirmationClose}>Cancel</Button>\n            <Button onClick={handleDelete} color=\"error\">Confirm Delete</Button>\n          </DialogActions>\n        </Dialog>\n      </>\n    )\n  }","// Import React stuff\nimport React, { useState, useEffect } from \"react\";\n\n// Import utilites and components\nimport api from \"../../utils/api\";\nimport useStore from \"../../utils/stores\"\nimport Bar from \"../../components/Bar/Bar\";\nimport { TaskTable } from './TaskTable'; \n\n// Import icons from mui\nimport AddIcon from '@mui/icons-material/AddCircle';\n\n// Import general mui stuff\nimport { Button, IconButton, Tooltip } from \"@mui/material\";\n\n// Import dialog stuff from mui\nimport { TextField, Dialog, DialogActions, DialogContent, DialogTitle, Select, MenuItem } from \"@mui/material\";\nimport { FormControl, InputLabel } from \"@mui/material\";\n\n// Import date picker and localization\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\n\n// Create a component for the UserTasks page\nexport function UserTasks() {\n\n  // Define default values for new tasks\n  const defaultNewProjectID = -1\n  const defaultNewTitle = \"\"\n  const defaultNewDate = new Date()\n\n  // Define a piece of state to use to store information from the api call\n  const [tasks, setTasks] = useState([])\n  const [projects, setProjects] = useState([])\n  const [people, setPeople] = useState([])\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const [newTaskProjectID, setNewTaskProject] = useState(defaultNewProjectID)\n  const [newTaskTitle, setNewTaskTitle] = useState(defaultNewTitle)\n  const [newTaskDate, setNewTaskDate] = useState(defaultNewDate) // This will default to today\n  const selectedPerson = useStore(state => state.selectedPerson)\n\n  const [newTaskPersonID, setNewTaskPerson] = useState(selectedPerson.personID)\n\n  // Handle opening and closing of the dialog for new tasks\n  const handleClickOpen = () => {\n    setIsDialogOpen(true)\n  }\n  const handleClose = () => {\n    setIsDialogOpen(false)\n    updateTasks(selectedPerson)\n\n    resetNewTaskValues()\n  }\n\n  // Handle state changes for the new task dialog\n  const handleNewTitleChange = (event) => {\n    setNewTaskTitle(event.target.value)\n  }\n  const handleNewDateChange = (newDate) => {\n    setNewTaskDate(newDate)\n  }\n  const handleProjectSelectChange = (event) => {\n    setNewTaskProject(event.target.value)\n  }\n\n  const handlePersonSelectChange = (event) => {\n    setNewTaskPerson(event.target.value)\n  }\n\n  // Set states for task attributes back to default\n  const resetNewTaskValues = () => {\n    setNewTaskProject(defaultNewProjectID)\n    setNewTaskTitle(defaultNewTitle)\n    setNewTaskDate(defaultNewDate)\n    setNewTaskPerson(selectedPerson.personID)\n  }\n\n  // Create a new task in the database and ensure data on the frontend is up to date\n  const handleSubmit = (title, date, project) => {\n    setIsDialogOpen(false)\n\n    // Generate an object with the information for the new task\n    const newTask = {\n      title: title,\n      completion: false,\n      // Convert the dates into unix timestamps\n      dueDate: new Date(date).getTime() / 1000,\n      creationDate: new Date().getTime() / 1000,\n      projectID: project,\n      assignee: newTaskPersonID\n    }\n\n    // Send a request to the backend to create a new task\n    api.post(`/api/tasks`, newTask)\n      .then(response => {\n        updateTasks(selectedPerson)\n      })\n\n    resetNewTaskValues()\n  }\n\n  // Make an api call to the backend to update the list of tasks\n  const updateTasks = (sp) => {\n    api.get(`/api/tasks/person/${sp.personID}`)\n    .then(response => {\n      setTasks(response.data ? response.data.rows : [])\n      console.log(\"Updating tasks\");\n    })\n    .catch(err => console.log(err))\n  }\n\n  // Make a call to the backend to update the list of projeccts\n  const updateProjects = () => {\n    api.get(`/api/projects`)\n    .then(response => {\n      setProjects(response.data ? response.data.rows : [])\n      console.log(\"Updating projects\");\n    })\n    .catch(err => console.log(err))\n  }\n\n  // Make a call to the backend to update the list of people\n  const updatePeople = () => {\n    api.get(`/api/people`)\n    .then(response => {\n      setPeople(response.data ? response.data.rows : [])\n      console.log(\"Updating people\");\n    })\n    .catch(err => console.log(err))\n  }\n\n  // The first time this component renders, update the Tasks\n  useEffect(() => {\n    updateProjects()\n    updatePeople()\n    updateTasks(selectedPerson)\n    const unsub1 = useStore.subscribe((state) => {\n      updateTasks(state.selectedPerson)\n    });\n    return () => {\n      unsub1()\n    }\n  }, [])\n\n  // Build the User Tasks page\n  return (\n    <div>\n      {/* Define the bar for the top of the screen, with its buttons */}\n      <Bar title=\"User Tasks\">\n        <Tooltip title=\"Add\" justify=\"left\">\n          <IconButton aria-label=\"add\" size=\"large\" onClick={handleClickOpen}>\n            <AddIcon />\n          </IconButton>\n        </Tooltip>\n      </Bar>\n\n      {/* Include the TaskTable component here. This component is defined above */}\n      <TaskTable rows={tasks} projects={projects} people={people} taskUpdate={updateTasks}/>\n\n      {/* Create the dialog box that will pop up when the Add button is pressed. This will add a new task to the database */}\n      <Dialog open={isDialogOpen} onClose={handleClose}>\n        <DialogTitle>Add a New Task</DialogTitle>\n        <DialogContent>\n          <TextField autoFocus id=\"Title\" label=\"Title\" type=\"text\" fullWidth variant=\"outlined\" margin=\"normal\" onChange={handleNewTitleChange} value={newTaskTitle} inputProps={{maxLength: 100}} helperText={`${newTaskTitle.length}/100`}/>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DesktopDatePicker label=\"Due Date\" inputFormat=\"MM/dd/yyyy\" value={newTaskDate} onChange={handleNewDateChange} renderInput={(params) => <TextField margin=\"normal\" {...params}/>} />\n          </LocalizationProvider>\n          <FormControl sx={{ m: 2, minWidth: 120 }}>\n            <InputLabel id='project-select'>Project</InputLabel>\n            <Select labelId=\"project-select-label\" id=\"project-select\" value={newTaskProjectID} label=\"Project\" onChange={handleProjectSelectChange}>\n              <MenuItem value={-1}>None</MenuItem>\n              {projects.map((row) => (\n                <MenuItem key={row.ProjectID} value={row.ProjectID}>{row.Title}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl sx={{ m: 2, minWidth: 200 }}>\n            <InputLabel id='assignee-select'>Assignee</InputLabel>\n            <Select labelId=\"assignee-select-label\" id=\"assignee-select\" value={newTaskPersonID} label=\"Person\" onChange={handlePersonSelectChange}>\n              <MenuItem value={-1}>None</MenuItem>\n              {people.map((row) => (\n                <MenuItem key={row.PersonID} value={row.PersonID}>{row.FirstName + \" \" + row.LastName}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={() => handleSubmit(newTaskTitle, newTaskDate, newTaskProjectID)}>Submit</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Bar from \"../../components/Bar/Bar\";\n\n// Import general mui stuff\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@mui/material\";\n\n// Import utilites and components\nimport api from \"../../utils/api\";\n\n// Create the Project page component\nexport function Project() {\n  // Setup a general format for dates\n  const dateFormatOptions = { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' }\n\n  const [projectTasks, setProjectTasks] = useState ([])\n\n  const updateProjectTasks = () => {\n    api.get(`/api/projects/overview`)\n    .then(response => {\n      setProjectTasks(response.data ? response.data.rows : [])\n      console.log(\"Updating project tasks\");\n    })\n    .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    updateProjectTasks()\n  }, [])\n\n  // For now, return a button to show on this component.\n  return (\n    <div>\n      <Bar title=\"Project\" />\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"User's Tasks\">\n\n          {/* Generate the headers of the rows */}\n          <TableHead>\n            <TableRow>\n              <TableCell>Project Title</TableCell>\n              <TableCell align=\"right\">Tasks remaining</TableCell>\n              <TableCell align=\"right\">Due</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {/* Map each task from the backend to a row in the table */}\n            {projectTasks.map((row) => (\n              // Handle mouse pointer on hover\n              <TableRow\n                key={row.TaskID}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell>{row.Title}</TableCell>\n                <TableCell align=\"right\" size=\"small\">{row.TaskRemaining ? row.TaskRemaining : 0}</TableCell>\n                <TableCell align=\"right\" size=\"medium\">{new Date(row.DueDate * 1000).toLocaleDateString(\"en-US\", dateFormatOptions)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Bar from \"../../components/Bar/Bar\";\n\n// Import general mui stuff\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Toolbar, Typography } from \"@mui/material\";\n\n// Import utilites and components\nimport api from \"../../utils/api\";\n\n// Create the manage page component\nexport function Manage() {\n\n  const [freeUsers, setFreeUsers] = useState([])\n  const [bestUser, setBestUser] = useState({})\n\n  const updateFreeUsers = () => {\n    api.get('/api/people/free')\n      .then(response => {\n        setFreeUsers(response.data ? response.data.rows : [])\n        console.log(\"Updating free users\")\n      })\n      .catch(err => console.log(err))\n  }\n\n  const updateBestUser = () => {\n    api.get('/api/people/best')\n      .then(response => {\n        setBestUser(response.data ? response.data.rows[0] : {})\n        console.log(\"Updating best user\")\n      })\n      .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    updateFreeUsers()\n    updateBestUser()\n  }, [])\n \n  return (\n    <>\n      <Bar title=\"Manage\"/>\n      <Toolbar>Free Users</Toolbar>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"Free Users\">\n\n          {/* Generate the headers of the rows */}\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">First Name</TableCell>\n              <TableCell align=\"left\">Last Name</TableCell>\n              <TableCell align=\"right\">Job Role</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {/* Map each task from the backend to a row in the table */}\n            {freeUsers.map((row) => (\n              <TableRow\n                key={row.PersonID}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell align=\"left\">{row.FirstName}</TableCell>\n                <TableCell align=\"left\">{row.LastName}</TableCell>\n                <TableCell align=\"right\">{row.JobRole}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <br/>\n      <Typography>The most productive person is {bestUser.FirstName} {bestUser.LastName} with a total of {bestUser.CompletedTasks} tasks completed.</Typography>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Bar from \"../../components/Bar/Bar\";\n\n// Import general mui stuff\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Toolbar } from \"@mui/material\";\n\nimport { FormControl, Select, MenuItem, InputLabel } from '@mui/material';\n\n// Import utilites and components\nimport api from \"../../utils/api\";\n\n// Create the manage page component\nexport function Department() {\n\n  const [departments, setDepartments] = useState([])\n  const [departmentSelect, setDepartmentSelect] = useState(1)\n  const [departmentPeople, setDepartmentPeople] = useState([])\n\n\n  const handleDeptSelectChange = (event) => {\n    setDepartmentSelect(event.target.value)\n    updateDepartmentPeople(event.target.value)\n  }\n\n  const updateDepartments = () => {\n    api.get('/api/departments')\n      .then(response => {\n        setDepartments(response.data ? response.data.rows : [])\n        console.log(\"Updating departments\")\n      })\n      .catch(err => console.log(err))\n  }\n\n  const updateDepartmentPeople = (sd) => {\n    api.get(`/api/people/department/${sd}`)\n    .then(response => {\n      setDepartmentPeople(response.data ? response.data.rows : [])\n      console.log(\"Updating department people\");\n    })\n    .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    updateDepartments()\n    updateDepartmentPeople(departmentSelect)\n  }, [])\n\n  return (\n    <>\n      <Bar title=\"Department\">\n        <FormControl sx={{ m: 2, minWidth: 120 }} justify=\"left\">\n          <InputLabel id=\"dept-select-label\">Department</InputLabel>\n          <Select labelId=\"dept-select-label\" id=\"dept-select\" label=\"Department\" value={departmentSelect} onChange={handleDeptSelectChange}>\n            {departments.map((row) => (\n              <MenuItem key={row.DeptID} value={row.DeptID}>{row.DeptName}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Bar>\n      <Toolbar>Employees</Toolbar>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"Free Users\">\n\n          {/* Generate the headers of the rows */}\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">First Name</TableCell>\n              <TableCell align=\"left\">Last Name</TableCell>\n              <TableCell align=\"right\">Job Role</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {/* Map each task from the backend to a row in the table */}\n            {departmentPeople.map((row) => (\n              <TableRow\n                key={row.PersonID}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell align=\"left\">{row.FirstName}</TableCell>\n                <TableCell align=\"left\">{row.LastName}</TableCell>\n                <TableCell align=\"right\">{row.JobRole}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <br/>\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.3a4c46be.ico\";","// Import React stuff\nimport React, { useState, useEffect } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\n// Import utilities\nimport logo from \"../../res/logo.ico\";\nimport api from \"../../utils/api\";\nimport useStore from \"../../utils/stores\"\n\n// Import a bunch of mui components to help build the nav drawer\nimport { makeStyles } from \"@mui/styles\";\nimport Drawer from \"@mui/material/Drawer\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport List from \"@mui/material/List\";\nimport Divider from \"@mui/material/Divider\";\nimport ListItem from \"@mui/material/ListItem\"; \nimport ListItemIcon from \"@mui/material/ListItemIcon\"; \nimport ListItemText from \"@mui/material/ListItemText\";\nimport TaskListIcon from '@mui/icons-material/FormatListBulletedRounded';\nimport FolderIcon from '@mui/icons-material/FolderOpenRounded';\nimport ManageIcon from \"@mui/icons-material/Settings\";\nimport DeptIcon from '@mui/icons-material/Groups';\nimport PersonIcon from \"@mui/icons-material/Person\";\nimport { IconButton } from \"@mui/material\";\n\n// Import menu components for the person selection\nimport {Menu, MenuItem} from \"@mui/material\"\n\n// Define what we want the width of the drawer to be\nconst drawerWidth = 220;\n\n// Generate css to style everything nicely\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  link: {\n    textDecoration: \"none\",\n    color: theme.palette.text.primary,\n  },\n  bottomPush: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignContent: \"flex-end\",\n    height: \"100%\",\n  },\n  bottomPushItems: {\n    textAlign: \"center\",\n    marginTop: \"auto\",\n    marginBottom: \"20px\"\n  },\n  logoImg: {\n    width: \"30px\",\n    objectFit: \"cover\",\n    marginRight: \"20px\",\n  },\n  logo: {\n    display: \"flex\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    padding: \"5px\",\n    marginLeft: \"16px\",\n    height: \"64px\",\n  },\n}));\n\n// Create the PersonMenu component to allow the user to select whose tasks they want to be able to view\nfunction PersonMenu(){\n\n  // Pieces of state for menu handling\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const menuOpen = Boolean(menuAnchorEl)\n\n  // Piece of state to handle list of people\n  const [people, setPeople] = useState([])\n\n  // Get the function to set the global store for selected person\n  const setSelectedPerson = useStore(state => state.setSelectedPerson)\n\n  // The first time this component renders, make the call to the backend to get the list of people\n  useEffect(() => api.get('/api/people')\n    .then(response => { \n      setPeople(response.data ? response.data.rows : [])\n    })\n    .catch(err => console.log(err)), [])\n\n  // Handle menu opening and closing by setting the menu anchor\n  const openMenu = (event) => {\n    setMenuAnchorEl(event.currentTarget)\n  }\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null)\n  }\n\n  // Handle setting a new selected person\n  const setPerson = (personID, personName) => {\n    setMenuAnchorEl(null)\n    setSelectedPerson({ 'personID': personID, 'personName': personName })\n  }\n\n  return (\n    <>\n      {/* Create the button to open the menu */}\n      <IconButton aria-label=\"Person\" size=\"large\" onClick={openMenu}>\n        <PersonIcon />\n      </IconButton>\n\n      {/* Create the menu for selecting the user */}\n      <Menu anchorEl={menuAnchorEl} open={menuOpen} onClose={handleMenuClose} MenuListProps={{ 'aria-labelledby': 'basic-button', }}>\n        {/* Create a menu item that always exists for going back to viewing all tasks in the database */}\n        <MenuItem key={-1} onClick={() => setPerson(-1, \"All Tasks\")}>All Tasks</MenuItem>\n        {/* Map the list of people to menu items */}\n        {people.map((row) => (\n            <MenuItem key={row.PersonID} onClick={() => setPerson(row.PersonID, row.FirstName + \" \" + row.LastName)}>{row.FirstName + \" \" + row.LastName}</MenuItem>\n          ))}\n      </Menu>\n    </>\n  )\n}\n\n// Create the NavDrawer(sidebar) component\nfunction NavDrawer() {\n  const classes = useStyles();\n\n  // Grab the piece of state for the selected person\n  const selectedPerson = useStore(state => state.selectedPerson)\n\n  // Build the actual JSX to build the nav drawer\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        {/* Generate the title and logo section and add a divider below it */}\n        <div className={classes.logo}>\n          <img className={classes.logoImg} alt={\"logo\"} src={logo} />\n          <h3>Task Organizer</h3>\n        </div>\n        <Divider />\n\n        {/* Create the list of buttons for each page and have them link to the proper endpoints */}\n        <List>\n          <Link to=\"/user-tasks\" className={classes.link}>\n            <ListItem button key=\"Tasks\">\n              <ListItemIcon>{<TaskListIcon />}</ListItemIcon>\n              <ListItemText primary=\"User Tasks\" />\n            </ListItem>\n          </Link>\n\n          <Link to=\"/project\" className={classes.link}>\n            <ListItem button key=\"Project\">\n              <ListItemIcon>{<FolderIcon />}</ListItemIcon>\n              <ListItemText primary=\"Project\" />\n            </ListItem>\n          </Link>\n\n          <Link to=\"/department\" className={classes.link}>\n            <ListItem button key=\"Department\">\n              <ListItemIcon>{<DeptIcon />}</ListItemIcon>\n              <ListItemText primary=\"Department\" />\n            </ListItem>\n          </Link>\n\n          <Link to=\"/manage\" className={classes.link}>\n            <ListItem button key=\"Manage\">\n              <ListItemIcon>{<ManageIcon />}</ListItemIcon>\n              <ListItemText primary=\"Manage\" />\n            </ListItem>\n          </Link>\n\n        </List>\n\n        {/* Create the bottom section for user selection */}\n        <div className={classes.bottomPush}>\n          <div className={classes.bottomPushItems}>\n            {PersonMenu()}\n            <div>{selectedPerson.personName}</div>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default withRouter(NavDrawer);\n","// Do some necessary imports for React to function properly\nimport React from \"react\";\nimport { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\n// Import Page component definitons\nimport { UserTasks, Project, Manage, Department } from \"./pages\";\n\n// Import css for this component\nimport \"./App.css\";\n\n// Import the NavDrawer component so it can be rendered\nimport NavDrawer from \"./components/NavDrawer/NavDrawer\";\n\n// Import material UI stuff\nimport { makeStyles } from \"@mui/styles\";\n\n// Generate some themeing for this component\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(2),\n  },\n\n  toolbar: theme.mixins.toolbar,\n}));\n\n// Build the JSX to export for this component. This defines how the entire app is structured\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <NavDrawer />\n        <div className={classes.content}>\n          <div className={classes.toolbar} />\n\n          {/* Create the routes to render certain pages at certain endpoints */}\n          <Switch>\n            <Redirect exact from=\"/\" to=\"user-tasks\" />\n            <Route path=\"/manage\">\n              <Manage />\n            </Route>\n            <Route path=\"/user-tasks\">\n              <UserTasks />\n            </Route>\n            <Route path=\"/project\">\n              <Project />\n            </Route>\n            <Route path=\"/department\">\n              <Department />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// React stuff\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Css and app component\nimport \"./index.css\";\nimport App from \"./App\";\n\n// Material ui theming stuff\nimport { ThemeProvider, StyledEngineProvider, createTheme } from \"@mui/material/styles\";\nimport { cyan, green } from \"@mui/material/colors\";\n\n// Generate a new theme from mui in dark mode with primary color cyan and secondary color green\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: cyan,\n    secondary: green,\n  },\n});\n\n// Render the App component inside the theme provider from mui. This ensures the entire app is themed properly\nReactDOM.render(\n  <div>\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </StyledEngineProvider>\n  </div>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}